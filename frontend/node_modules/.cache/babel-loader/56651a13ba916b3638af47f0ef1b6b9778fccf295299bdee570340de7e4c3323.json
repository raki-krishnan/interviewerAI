{"ast":null,"code":"var _jsxFileName = \"/Users/rakikrishnan/Desktop/weather-app/src/Components/WeatherApp/WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './WeatherApp.css';\nimport Papa from 'papaparse';\nimport search_icon from \"../Assets/search.png\";\nimport cloud_icon from \"../Assets/cloud.png\";\nimport rain_icon from \"../Assets/rain.png\";\nimport snow_icon from \"../Assets/snow.png\";\nimport humidity_icon from \"../Assets/humidity.png\";\nimport drizzle_icon from \"../Assets/drizzle.png\";\nimport clear_icon from \"../Assets/clear.png\";\nimport wind_icon from \"../Assets/wind.png\";\nimport thunderstorm_icon from \"../Assets/thunderstorm.png\";\nimport nightrain_icon from \"../Assets/nightrain.png\";\nimport nightclear_icon from \"../Assets/nightclear.png\";\nimport nightcloud_icon from \"../Assets/nightcloud.png\";\nimport nightthunderstorm_icon from \"../Assets/nightthunderstorm.png\";\nimport nightsnow_icon from \"../Assets/nightsnow.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [wicon, setWicon] = useState(cloud_icon);\n  const [cities, setCities] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [currentTemp, setCurrentTemp] = useState(null);\n  const citiesList = [\"Tokyo\", \"New York\", \"London\", \"Paris\", \"Sydney\", \"Moscow\", \"Cairo\", \"Rio de Janeiro\", \"Toronto\", \"Beijing\", \"Berlin\", \"Rome\", \"Madrid\", \"Dubai\", \"Seoul\", \"Istanbul\", \"Mumbai\", \"Bangkok\", \"Los Angeles\", \"Chicago\", \"Miami\", \"Las Vegas\", \"San Francisco\", \"Washington\", \"Boston\", \"Seattle\", \"Dallas\", \"Houston\", \"Atlanta\", \"Philadelphia\", \"Phoenix\", \"Denver\", \"Minneapolis\", \"Detroit\", \"Honolulu\", \"Anchorage\", \"Mexico City\", \"Buenos Aires\", \"Sao Paulo\", \"Cape Town\", \"Johannesburg\", \"Nairobi\", \"Copenhagen\", \"Stockholm\", \"Oslo\", \"Helsinki\", \"Warsaw\", \"Prague\", \"Vienna\", \"Budapest\", \"Athens\", \"Melbourne\", \"Edinburgh\", \"St. Petersburg\", \"Kiev\", \"Minsk\", \"Pretoria\", \"New Delhi\", \"Chennai\", \"Bombay\", \"Cologne\", \"Frankfurt\", \"Zurich\", \"Geneva\", \" Bogota\", \"Lima\", \"Caracas\", \"Santiago\", \"Cancun\", \"Quito\", \"Guayaquil\", \"La Paz\", \"Asuncion\", \"San Diego\", \"San Antonio\", \"San Jose\", \"New Orleans\", \"Portland\", \"Salt Lake City\", \"Barcelona\", \"Venice\", \"Milan\", \"Amsterdam\", \"Brussels\", \"Dublin\", \"Lisbon\", \"Bucharest\", \"Shanghai\", \"Hong Kong\", \"Singapore\", \"Kuala Lumpur\", \"Jakarta\", \"Manila\", \"Hanoi\", \"Normandy\", \"Taipei\", \"Auckland\", \"Wellington\", \"Christchurch\", \"Brisbane\", \"Perth\", \"Adelaide\", \"Canberra\", \"Hobart\", \"Darwin\", \"Alice Springs\", \"Cairns\", \"Gold Coast\", \"Townsville\", \"Mackay\", \"Rockhampton\", \"Bundaberg\", \"Hervey Bay\", \"Fraser Island\", \"Luzhou\", \"Chengdu\", \"Chongqing\", \"Wuhan\", \"Nanjing\", \"Hangzhou\", \"Puyang\", \"Suzhou\", \"Charlotte\"];\n  const loadCities = async () => {\n    // Assuming your CSV file is located in the `public` directory.\n    const response = await fetch('/simplemaps_worldcities_basicv1.77/worldcities.csv');\n    if (!response.ok) {\n      // If the response is not OK, log the error and return early\n      console.error(`HTTP error! status: ${response.status}`);\n      return;\n    }\n\n    // If the response is OK, read the text (CSV content)\n    const csv = await response.text();\n\n    // Now parse the CSV text\n    const results = Papa.parse(csv, {\n      header: true\n    });\n    const rows = results.data; // array of objects\n    setCities(rows);\n    if (rows.length > 0) {\n      console.log(\"First city from the loaded data:\", rows[0]);\n    } else {\n      console.log(\"No data in CSV\");\n    }\n  };\n  useEffect(() => {\n    loadCities();\n    fetchWeatherData(\"Ann Arbor\");\n  }, []);\n  const fetchRandomWeather = () => {\n    if (cities.length > 0) {\n      const tryFetch = () => {\n        const randomIndex = Math.floor(Math.random() * cities.length);\n        const randomCity = cities[randomIndex];\n        if (!randomCity || randomCity.city === \"\") {\n          // Invalid city object, retry\n          tryFetch();\n          return;\n        }\n        fetchWeatherData(randomCity.city, () => {\n          // onSuccess: Log the success or perform other actions\n          console.log(\"Weather data fetched successfully for: \" + randomCity.city);\n        }, () => {\n          // onError: Retry with another random city\n          console.log(\"Retrying with another city\");\n          tryFetch();\n        });\n      };\n      tryFetch();\n    }\n  };\n  let api_key = \"b619c02ef0d0c5ea4a66d9ddf680e09f\";\n  const element = document.getElementsByClassName(\"cityInput\");\n\n  // const whereElseInTheWorld = async () => {\n  //     const currentCity = document.getElementsByClassName(\"weather-location\")[0].innerHTML;\n  //     const currentCityTemperature = document.getElementsByClassName(\"weather-temp\")[0].innerHTML;;\n\n  //     // A helper function to delay the loop execution\n  //     const delay = ms => new Promise(res => setTimeout(res, ms));\n\n  //     // Assuming cities is an array of city objects with a city name property\n  //     const maxAttempts = cities.length;\n  //     const attemptIntervalMs = 10; // Delay between attempts in milliseconds\n\n  //     for (let i = 0; i < maxAttempts; i++) {\n  //         const randomIndex = Math.floor(Math.random() * cities.length);\n  //         const city = cities[randomIndex].city;\n\n  //         // Avoid re-checking the current city\n  //         if (city === currentCity) {\n  //             continue;\n  //         }\n\n  //         try {\n  //             // You will call the fetchWeatherData function with a callback\n  //             const checkTemperatureMatch = (onSuccess, onError) => {\n  //                 fetchWeatherData(city, onSuccess, onError);\n  //             };\n\n  //             await new Promise((resolve, reject) => {\n  //                 checkTemperatureMatch(() => {\n  //                     // If the temperature matches, we resolve the promise\n  //                     if (currentCityTemperature === currentTemp) {\n  //                         resolve();\n  //                     } else {\n  //                         // Otherwise, we reject and try the next city after a delay\n  //                         setTimeout(() => reject(), attemptIntervalMs);\n  //                     }\n  //                 }, () => {\n  //                     // If the API call fails, we try the next city after a delay\n  //                     setTimeout(() => reject(), attemptIntervalMs);\n  //                 });\n  //             });\n\n  //             // If we've found a match, we break out of the loop\n  //             break;\n  //         } catch {\n  //             // Continue to the next iteration after a delay\n  //             await delay(attemptIntervalMs);\n  //         }\n  //     }\n  // };\n  const whereElseInTheWorld = async () => {\n    //We want to show the weather of a different city with the same temperature as the current city\n    const temperature = document.getElementsByClassName(\"weather-temp\")[0].innerHTML;\n    console.log(temperature);\n    const currentCity = document.getElementsByClassName(\"weather-location\")[0].innerHTML;\n    console.log(currentCity);\n    let randomCity = \"\";\n    let randomIndex = 0;\n    let found = false;\n    const startTime = Date.now(); // Get the current time at the start of the loop\n    while (!found) {\n      console.log(\"found before: \" + found);\n      randomIndex = Math.floor(Math.random() * citiesList.length);\n      randomCity = citiesList[randomIndex];\n      console.log(randomCity);\n      await fetchWeatherData(randomCity);\n      console.log(\"getElembyclass : \" + document.getElementsByClassName(\"weather-temp\")[0].innerHTML);\n      if (document.getElementsByClassName(\"weather-temp\")[0].innerHTML === temperature && randomCity !== currentCity) {\n        found = true;\n      }\n      console.log(document.getElementsByClassName(\"weather-temp\")[0].innerHTML);\n      console.log(found);\n      if (Date.now() - startTime > 10000) {\n        // If more than 10 seconds have passed\n        console.log(\"Time's up! Displaying the original city.\");\n        fetchWeatherData(currentCity); // Fetch the weather data for the original city\n        break; // Break the loop\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  };\n  const fetchWeatherData = async (city, onSuccess, onError) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_key}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"City not found\");\n      }\n      const data = await response.json();\n      const cityTemperature = Math.floor((data.main.temp - 273.15) * 9 / 5 + 32);\n      setCurrentTemp(cityTemperature);\n\n      // Update the UI with the new data\n      const humidity = document.getElementsByClassName(\"humidity-percentage\");\n      const wind = document.getElementsByClassName(\"wind-speed\");\n      const temperature = document.getElementsByClassName(\"weather-temp\");\n      const location = document.getElementsByClassName(\"weather-location\");\n      humidity[0].innerHTML = data.main.humidity + \"%\";\n      wind[0].innerHTML = data.wind.speed + \" mph\";\n      temperature[0].innerHTML = cityTemperature + \"Â°F\";\n      location[0].innerHTML = data.name;\n\n      // Update weather icon based on the API response\n      if (data.weather && data.weather[0].icon) {\n        switch (data.weather[0].icon) {\n          case \"01d\":\n            setWicon(clear_icon);\n            break;\n          case \"01n\":\n            setWicon(nightclear_icon);\n            break;\n          case \"02d\":\n          case \"03d\":\n          case \"04d\":\n            setWicon(cloud_icon);\n            break;\n          case \"02n\":\n          case \"03n\":\n          case \"04n\":\n            setWicon(nightcloud_icon);\n            break;\n          case \"09d\":\n            setWicon(drizzle_icon);\n            break;\n          case \"09n\":\n            setWicon(nightrain_icon);\n            break;\n          case \"10d\":\n            setWicon(rain_icon);\n            break;\n          case \"10n\":\n            setWicon(nightrain_icon);\n            break;\n          case \"11d\":\n            setWicon(thunderstorm_icon);\n            break;\n          case \"11n\":\n            setWicon(nightthunderstorm_icon);\n            break;\n          case \"13d\":\n            setWicon(snow_icon);\n            break;\n          case \"13n\":\n            setWicon(nightsnow_icon);\n            break;\n          default:\n            setWicon(cloud_icon);\n        }\n      }\n      if (onSuccess) {\n        onSuccess(cityTemperature);\n      }\n    } catch (error) {\n      console.error(error);\n      setError(\"City not found\");\n      setTimeout(() => setError(\"\"), 3000);\n      if (onError) {\n        onError();\n      }\n    }\n  };\n  const search = () => {\n    if (element[0].value === \"\") {\n      return;\n    }\n    fetchWeatherData(element[0].value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"cityInput\",\n        placeholder: \"Search\",\n        onKeyPress: event => {\n          if (event.key === 'Enter') {\n            search();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-icon\",\n        onClick: search,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: search_icon,\n          alt: \"search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-info-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: wicon,\n          alt: \"cloud\",\n          className: \"main-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-details-button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-temp\",\n            children: \"57\\xB0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-location\",\n            children: \"Ann Arbor, United States\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"where-else\",\n          onClick: whereElseInTheWorld,\n          children: \"Twin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: humidity_icon,\n          alt: \"\",\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"humidity-percentage\",\n            children: \"64%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: \"Humidity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: wind_icon,\n          alt: \"\",\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wind-speed\",\n            children: \"10 mph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: \"Wind Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"lucky-button\",\n      onClick: fetchRandomWeather,\n      children: \"I'm Feeling Lucky\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherApp, \"A/6SfGE4eDNjo6M8v0Rv0uVlRFw=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["useState","useEffect","Papa","search_icon","cloud_icon","rain_icon","snow_icon","humidity_icon","drizzle_icon","clear_icon","wind_icon","thunderstorm_icon","nightrain_icon","nightclear_icon","nightcloud_icon","nightthunderstorm_icon","nightsnow_icon","jsxDEV","_jsxDEV","WeatherApp","_s","wicon","setWicon","cities","setCities","error","setError","currentTemp","setCurrentTemp","citiesList","loadCities","response","fetch","ok","console","status","csv","text","results","parse","header","rows","data","length","log","fetchWeatherData","fetchRandomWeather","tryFetch","randomIndex","Math","floor","random","randomCity","city","api_key","element","document","getElementsByClassName","whereElseInTheWorld","temperature","innerHTML","currentCity","found","startTime","Date","now","onSuccess","onError","url","Error","json","cityTemperature","main","temp","humidity","wind","location","speed","name","weather","icon","setTimeout","search","value","className","children","type","placeholder","onKeyPress","event","key","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/rakikrishnan/Desktop/weather-app/src/Components/WeatherApp/WeatherApp.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './WeatherApp.css';\nimport Papa from 'papaparse';\nimport search_icon from \"../Assets/search.png\";\nimport cloud_icon from \"../Assets/cloud.png\";\nimport rain_icon from \"../Assets/rain.png\";\nimport snow_icon from \"../Assets/snow.png\";\nimport humidity_icon from \"../Assets/humidity.png\";\nimport drizzle_icon from \"../Assets/drizzle.png\";\nimport clear_icon from \"../Assets/clear.png\";\nimport wind_icon from \"../Assets/wind.png\";\nimport thunderstorm_icon from \"../Assets/thunderstorm.png\";\nimport nightrain_icon from \"../Assets/nightrain.png\";\nimport nightclear_icon from \"../Assets/nightclear.png\";\nimport nightcloud_icon from \"../Assets/nightcloud.png\";\nimport nightthunderstorm_icon from \"../Assets/nightthunderstorm.png\";\nimport nightsnow_icon from \"../Assets/nightsnow.png\";\n\n\nconst WeatherApp = () => {\n\n    const [wicon, setWicon] = useState(cloud_icon);\n    const [cities, setCities] = useState([]);\n    const [error, setError] = useState(\"\");\n    const [currentTemp, setCurrentTemp] = useState(null);\n    \n    \n    const citiesList = [\"Tokyo\", \"New York\", \"London\", \"Paris\", \"Sydney\", \n    \"Moscow\", \"Cairo\", \"Rio de Janeiro\", \"Toronto\", \"Beijing\", \"Berlin\", \"Rome\", \"Madrid\",\n    \"Dubai\", \"Seoul\", \"Istanbul\", \"Mumbai\", \"Bangkok\", \"Los Angeles\", \"Chicago\", \"Miami\",\n    \"Las Vegas\", \"San Francisco\", \"Washington\", \"Boston\", \"Seattle\", \"Dallas\", \"Houston\",\n    \"Atlanta\", \"Philadelphia\", \"Phoenix\", \"Denver\", \"Minneapolis\", \"Detroit\", \"Honolulu\",\n    \"Anchorage\", \"Mexico City\", \"Buenos Aires\", \"Sao Paulo\", \"Cape Town\", \"Johannesburg\",\n    \"Nairobi\", \"Copenhagen\", \"Stockholm\", \"Oslo\", \"Helsinki\", \"Warsaw\", \"Prague\", \"Vienna\",\n    \"Budapest\", \"Athens\", \"Melbourne\", \"Edinburgh\", \"St. Petersburg\", \"Kiev\", \"Minsk\", \"Pretoria\",\n    \"New Delhi\", \"Chennai\", \"Bombay\", \"Cologne\", \"Frankfurt\", \"Zurich\", \"Geneva\", \" Bogota\",\n    \"Lima\", \"Caracas\", \"Santiago\", \"Cancun\", \"Quito\", \"Guayaquil\", \"La Paz\", \"Asuncion\",\n    \"San Diego\", \"San Antonio\", \"San Jose\", \"New Orleans\", \"Portland\", \"Salt Lake City\",\n    \"Barcelona\", \"Venice\", \"Milan\", \"Amsterdam\", \"Brussels\", \"Dublin\", \"Lisbon\", \"Bucharest\",\n    \"Shanghai\", \"Hong Kong\", \"Singapore\", \"Kuala Lumpur\", \"Jakarta\", \"Manila\", \"Hanoi\", \n    \"Normandy\", \"Taipei\", \"Auckland\", \"Wellington\", \"Christchurch\", \"Brisbane\", \"Perth\",\n    \"Adelaide\", \"Canberra\", \"Hobart\", \"Darwin\", \"Alice Springs\", \"Cairns\", \"Gold Coast\",\n    \"Townsville\", \"Mackay\", \"Rockhampton\", \"Bundaberg\", \"Hervey Bay\", \"Fraser Island\", \n    \"Luzhou\", \"Chengdu\", \"Chongqing\", \"Wuhan\", \"Nanjing\", \"Hangzhou\", \"Puyang\", \"Suzhou\",\n    \"Charlotte\"];\n\n\n    const loadCities = async () => {\n        // Assuming your CSV file is located in the `public` directory.\n        const response = await fetch('/simplemaps_worldcities_basicv1.77/worldcities.csv');\n\n        if (!response.ok) {\n            // If the response is not OK, log the error and return early\n            console.error(`HTTP error! status: ${response.status}`);\n            return;\n        }\n\n        // If the response is OK, read the text (CSV content)\n        const csv = await response.text();\n\n        // Now parse the CSV text\n        const results = Papa.parse(csv, { header: true });\n        const rows = results.data; // array of objects\n        setCities(rows);\n        \n        if (rows.length > 0) {\n            console.log(\"First city from the loaded data:\", rows[0]);\n        } else {\n            console.log(\"No data in CSV\");\n        }\n    };\n    \n    useEffect(() => {\n        loadCities();\n        fetchWeatherData(\"Ann Arbor\");\n    }, []);\n\n    const fetchRandomWeather = () => {\n        if (cities.length > 0) {\n            const tryFetch = () => {\n                const randomIndex = Math.floor(Math.random() * cities.length);\n                const randomCity = cities[randomIndex];\n    \n                if (!randomCity || randomCity.city === \"\") {\n                    // Invalid city object, retry\n                    tryFetch();\n                    return;\n                }\n    \n                fetchWeatherData(randomCity.city, () => {\n                    // onSuccess: Log the success or perform other actions\n                    console.log(\"Weather data fetched successfully for: \" + randomCity.city);\n                }, () => {\n                    // onError: Retry with another random city\n                    console.log(\"Retrying with another city\");\n                    tryFetch();\n                });\n            };\n    \n            tryFetch();\n        }\n    };\n\n\n\n    let api_key = \"b619c02ef0d0c5ea4a66d9ddf680e09f\";\n    const element = document.getElementsByClassName(\"cityInput\");\n\n    // const whereElseInTheWorld = async () => {\n    //     const currentCity = document.getElementsByClassName(\"weather-location\")[0].innerHTML;\n    //     const currentCityTemperature = document.getElementsByClassName(\"weather-temp\")[0].innerHTML;;\n    \n    //     // A helper function to delay the loop execution\n    //     const delay = ms => new Promise(res => setTimeout(res, ms));\n    \n    //     // Assuming cities is an array of city objects with a city name property\n    //     const maxAttempts = cities.length;\n    //     const attemptIntervalMs = 10; // Delay between attempts in milliseconds\n    \n    //     for (let i = 0; i < maxAttempts; i++) {\n    //         const randomIndex = Math.floor(Math.random() * cities.length);\n    //         const city = cities[randomIndex].city;\n    \n    //         // Avoid re-checking the current city\n    //         if (city === currentCity) {\n    //             continue;\n    //         }\n    \n    //         try {\n    //             // You will call the fetchWeatherData function with a callback\n    //             const checkTemperatureMatch = (onSuccess, onError) => {\n    //                 fetchWeatherData(city, onSuccess, onError);\n    //             };\n    \n    //             await new Promise((resolve, reject) => {\n    //                 checkTemperatureMatch(() => {\n    //                     // If the temperature matches, we resolve the promise\n    //                     if (currentCityTemperature === currentTemp) {\n    //                         resolve();\n    //                     } else {\n    //                         // Otherwise, we reject and try the next city after a delay\n    //                         setTimeout(() => reject(), attemptIntervalMs);\n    //                     }\n    //                 }, () => {\n    //                     // If the API call fails, we try the next city after a delay\n    //                     setTimeout(() => reject(), attemptIntervalMs);\n    //                 });\n    //             });\n    \n    //             // If we've found a match, we break out of the loop\n    //             break;\n    //         } catch {\n    //             // Continue to the next iteration after a delay\n    //             await delay(attemptIntervalMs);\n    //         }\n    //     }\n    // };\n    const whereElseInTheWorld = async () => {\n        //We want to show the weather of a different city with the same temperature as the current city\n        const temperature = document.getElementsByClassName(\"weather-temp\")[0].innerHTML;\n        console.log(temperature);\n        const currentCity = document.getElementsByClassName(\"weather-location\")[0].innerHTML;\n        console.log(currentCity);\n        let randomCity = \"\";\n        let randomIndex = 0;\n        let found = false;\n        const startTime = Date.now(); // Get the current time at the start of the loop\n        while (!found) {\n            console.log(\"found before: \" + found)\n            randomIndex = Math.floor(Math.random() * citiesList.length);\n            randomCity = citiesList[randomIndex];\n            console.log(randomCity);\n            await fetchWeatherData(randomCity);\n            console.log(\"getElembyclass : \" + document.getElementsByClassName(\"weather-temp\")[0].innerHTML)\n            if (document.getElementsByClassName(\"weather-temp\")[0].innerHTML === temperature && randomCity !== currentCity) {\n                found = true;\n            }\n            console.log(document.getElementsByClassName(\"weather-temp\")[0].innerHTML);\n            console.log(found);\n            if (Date.now() - startTime > 10000) { // If more than 10 seconds have passed\n                console.log(\"Time's up! Displaying the original city.\");\n                fetchWeatherData(currentCity); // Fetch the weather data for the original city\n                break; // Break the loop\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    };\n\n    const fetchWeatherData = async (city, onSuccess, onError) => {\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_key}`;\n    \n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(\"City not found\");\n            }\n    \n            const data = await response.json();\n            const cityTemperature = Math.floor((data.main.temp - 273.15) * 9/5 + 32);\n            setCurrentTemp(cityTemperature);\n    \n            // Update the UI with the new data\n            const humidity = document.getElementsByClassName(\"humidity-percentage\");\n            const wind = document.getElementsByClassName(\"wind-speed\");\n            const temperature = document.getElementsByClassName(\"weather-temp\");\n            const location = document.getElementsByClassName(\"weather-location\");\n    \n            humidity[0].innerHTML = data.main.humidity + \"%\";\n            wind[0].innerHTML = data.wind.speed + \" mph\";\n            temperature[0].innerHTML = cityTemperature + \"Â°F\";\n            location[0].innerHTML = data.name;\n    \n            // Update weather icon based on the API response\n            if(data.weather && data.weather[0].icon) {\n                switch(data.weather[0].icon) {\n                    case \"01d\":\n                        setWicon(clear_icon);\n                        break;\n                    case \"01n\":\n                        setWicon(nightclear_icon);\n                        break;\n                    case \"02d\":\n                    case \"03d\":\n                    case \"04d\":\n                        setWicon(cloud_icon);\n                        break;\n                    case \"02n\":\n                    case \"03n\":\n                    case \"04n\":\n                        setWicon(nightcloud_icon);\n                        break;\n                    case \"09d\":\n                        setWicon(drizzle_icon);\n                        break;\n                    case \"09n\":\n                        setWicon(nightrain_icon);\n                        break;\n                    case \"10d\":\n                        setWicon(rain_icon);\n                        break;\n                    case \"10n\":\n                        setWicon(nightrain_icon);\n                        break;\n                    case \"11d\":\n                        setWicon(thunderstorm_icon);\n                        break;\n                    case \"11n\":\n                        setWicon(nightthunderstorm_icon);\n                        break;\n                    case \"13d\":\n                        setWicon(snow_icon);\n                        break;\n                    case \"13n\":\n                        setWicon(nightsnow_icon);\n                        break;\n                    default:\n                        setWicon(cloud_icon);\n                }\n            }\n            if (onSuccess) {\n                onSuccess(cityTemperature); \n            }\n        } catch (error) {\n            console.error(error);\n            setError(\"City not found\");\n            setTimeout(() => setError(\"\"), 3000);\n            if (onError) {\n                onError();\n            }\n        }\n    };\n\n    const search = () => {\n        if (element[0].value === \"\") {\n            return;\n        }\n        fetchWeatherData(element[0].value);\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"top-bar\">\n                <input \n                    type=\"text\" \n                    className=\"cityInput\" \n                    placeholder=\"Search\"\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            search();\n                        }\n                    }}\n                />\n                <div className=\"search-icon\" onClick={search}>\n                    <img src={search_icon} alt=\"search\"/>\n                </div>\n            </div>\n            {error && <div className=\"error\">{error}</div>}\n            <div className=\"weather-info-container\">\n                <div className=\"weather-image\">\n                    <img src={wicon} alt=\"cloud\" className=\"main-icon\" />\n                </div>\n                \n                <div className=\"weather-details-button-container\">\n                    <div className=\"weather-details\">\n                        <div className=\"weather-temp\">57Â°F</div>\n                        <div className=\"weather-location\">Ann Arbor, United States</div>\n                    </div>\n                    <button className=\"where-else\" onClick={whereElseInTheWorld}>Twin</button>\n                </div>\n            </div>\n            <div className=\"data-container\">\n                <div className=\"element\">\n                    <img src={humidity_icon} alt=\"\" className=\"icon\" />\n                    <div className=\"data\">\n                        <div className=\"humidity-percentage\">64%</div>\n                        <div className=\"text\">Humidity</div>\n                    </div>\n                </div>\n                <div className=\"element\">\n                    <img src={wind_icon} alt=\"\" className=\"icon\" />\n                    <div className=\"data\">\n                        <div className=\"wind-speed\">10 mph</div>\n                        <div className=\"text\">Wind Speed</div>\n                    </div>\n                </div>\n            </div>\n            <button className=\"lucky-button\" onClick={fetchRandomWeather}>I'm Feeling Lucky</button>\n        </div>\n    )\n}\n\nexport default WeatherApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}