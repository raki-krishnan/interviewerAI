{"ast":null,"code":"var _jsxFileName = \"/Users/rakikrishnan/Desktop/mhacks-project/frontend/src/Components/InterviewApp/InterviewApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './InterviewApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoRecorder() {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const videoRef = useRef(null);\n  const streamRef = useRef(null);\n  const startCamera = async () => {\n    try {\n      streamRef.current = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      videoRef.current.srcObject = streamRef.current;\n    } catch (error) {\n      console.error(\"Error accessing media devices.\", error);\n    }\n  };\n  useEffect(() => {\n    startCamera();\n    // Make sure to stop the camera stream when the component unmounts\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  const startRecording = async () => {\n    try {\n      streamRef.current = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      videoRef.current.srcObject = streamRef.current;\n      mediaRecorderRef.current = new MediaRecorder(streamRef.current);\n      mediaRecorderRef.current.addEventListener(\"dataavailable\", handleDataAvailable);\n      mediaRecorderRef.current.start();\n      setRecording(true);\n      // Reset the video URL if you want to allow for a new recording after stopping a previous one\n      setVideoURL(null);\n    } catch (error) {\n      console.error(\"Error accessing media devices.\", error);\n    }\n  };\n  const handleDataAvailable = event => {\n    if (event.data.size > 0) {\n      setVideoURL(URL.createObjectURL(event.data));\n    }\n  };\n  const stopRecording = () => {\n    mediaRecorderRef.current.stop();\n    streamRef.current.getTracks().forEach(track => track.stop());\n    setRecording(false);\n  };\n  const handleSubmit = async () => {\n    console.log('Submit the video here...');\n    // Add the code to upload the video to your backend here.\n    // After submitting, you can reset the videoURL to null to remove the playback video\n    setVideoURL(null);\n    startCamera();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoRecorder, \"Taznsoy3m3y+cn0g2GtImvLXiw4=\");\n_c = VideoRecorder;\nexport default VideoRecorder;\nvar _c;\n$RefreshReg$(_c, \"VideoRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","VideoRecorder","_s","recording","setRecording","videoURL","setVideoURL","mediaRecorderRef","videoRef","streamRef","startCamera","current","navigator","mediaDevices","getUserMedia","video","audio","srcObject","error","console","getTracks","forEach","track","stop","startRecording","MediaRecorder","addEventListener","handleDataAvailable","start","event","data","size","URL","createObjectURL","stopRecording","handleSubmit","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rakikrishnan/Desktop/mhacks-project/frontend/src/Components/InterviewApp/InterviewApp.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './InterviewApp.css';\n\nfunction VideoRecorder() {\n  const [recording, setRecording] = useState(false);\n  const [videoURL, setVideoURL] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const videoRef = useRef(null);\n  const streamRef = useRef(null);\n\n  const startCamera = async () => {\n    try {\n      streamRef.current = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n      videoRef.current.srcObject = streamRef.current;\n    } catch (error) {\n      console.error(\"Error accessing media devices.\", error);\n    }\n  };\n\n  useEffect(() => {\n    startCamera();\n    // Make sure to stop the camera stream when the component unmounts\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  const startRecording = async () => {\n    try {\n      streamRef.current = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n      videoRef.current.srcObject = streamRef.current;\n      mediaRecorderRef.current = new MediaRecorder(streamRef.current);\n      mediaRecorderRef.current.addEventListener(\"dataavailable\", handleDataAvailable);\n      mediaRecorderRef.current.start();\n      setRecording(true);\n      // Reset the video URL if you want to allow for a new recording after stopping a previous one\n      setVideoURL(null);\n    } catch (error) {\n      console.error(\"Error accessing media devices.\", error);\n    }\n  };\n\n  const handleDataAvailable = (event) => {\n    if (event.data.size > 0) {\n      setVideoURL(URL.createObjectURL(event.data));\n    }\n  };\n\n  const stopRecording = () => {\n    mediaRecorderRef.current.stop();\n    streamRef.current.getTracks().forEach(track => track.stop());\n    setRecording(false);\n  };\n\n  const handleSubmit = async () => {\n    console.log('Submit the video here...');\n    // Add the code to upload the video to your backend here.\n    // After submitting, you can reset the videoURL to null to remove the playback video\n    setVideoURL(null);\n    startCamera();\n  };\n\n  return (\n    <div>\n\n    </div>\n    \n  );\n}\n\nexport default VideoRecorder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}