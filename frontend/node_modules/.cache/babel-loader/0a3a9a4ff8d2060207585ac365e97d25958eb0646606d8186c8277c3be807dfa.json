{"ast":null,"code":"var _jsxFileName = \"/Users/rakikrishnan/Desktop/weather-app/src/Components/WeatherApp/WeatherApp.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './WeatherApp.css';\nimport Papa from 'papaparse';\nimport search_icon from \"../Assets/search.png\";\nimport cloud_icon from \"../Assets/cloud.png\";\nimport rain_icon from \"../Assets/rain.png\";\nimport snow_icon from \"../Assets/snow.png\";\nimport humidity_icon from \"../Assets/humidity.png\";\nimport drizzle_icon from \"../Assets/drizzle.png\";\nimport clear_icon from \"../Assets/clear.png\";\nimport wind_icon from \"../Assets/wind.png\";\nimport thunderstorm_icon from \"../Assets/thunderstorm.png\";\nimport nightrain_icon from \"../Assets/nightrain.png\";\nimport nightclear_icon from \"../Assets/nightclear.png\";\nimport nightcloud_icon from \"../Assets/nightcloud.png\";\nimport nightthunderstorm_icon from \"../Assets/nightthunderstorm.png\";\nimport nightsnow_icon from \"../Assets/nightsnow.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [wicon, setWicon] = useState(cloud_icon);\n  const [cities, setCities] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [currentTemp, setCurrentTemp] = useState(null);\n\n  // const cities = [\"Tokyo\", \"New York\", \"London\", \"Paris\", \"Sydney\", \n  // \"Moscow\", \"Cairo\", \"Rio de Janeiro\", \"Toronto\", \"Beijing\", \"Berlin\", \"Rome\", \"Madrid\",\n  // \"Dubai\", \"Seoul\", \"Istanbul\", \"Mumbai\", \"Bangkok\", \"Los Angeles\", \"Chicago\", \"Miami\",\n  // \"Las Vegas\", \"San Francisco\", \"Washington\", \"Boston\", \"Seattle\", \"Dallas\", \"Houston\",\n  // \"Atlanta\", \"Philadelphia\", \"Phoenix\", \"Denver\", \"Minneapolis\", \"Detroit\", \"Honolulu\",\n  // \"Anchorage\", \"Mexico City\", \"Buenos Aires\", \"Sao Paulo\", \"Cape Town\", \"Johannesburg\",\n  // \"Nairobi\", \"Copenhagen\", \"Stockholm\", \"Oslo\", \"Helsinki\", \"Warsaw\", \"Prague\", \"Vienna\",\n  // \"Budapest\", \"Athens\", \"Melbourne\", \"Edinburgh\", \"St. Petersburg\", \"Kiev\", \"Minsk\", \"Pretoria\",\n  // \"New Delhi\", \"Chennai\", \"Bombay\", \"Cologne\", \"Frankfurt\", \"Zurich\", \"Geneva\", \" Bogota\",\n  // \"Lima\", \"Caracas\", \"Santiago\", \"Cancun\", \"Quito\", \"Guayaquil\", \"La Paz\", \"Asuncion\",\n  // \"San Diego\", \"San Antonio\", \"San Jose\", \"New Orleans\", \"Portland\", \"Salt Lake City\",\n  // \"Barcelona\", \"Venice\", \"Milan\", \"Amsterdam\", \"Brussels\", \"Dublin\", \"Lisbon\", \"Bucharest\",\n  // \"Shanghai\", \"Hong Kong\", \"Singapore\", \"Kuala Lumpur\", \"Jakarta\", \"Manila\", \"Hanoi\", \n  // \"Normandy\", \"Taipei\", \"Auckland\", \"Wellington\", \"Christchurch\", \"Brisbane\", \"Perth\"];\n\n  const loadCities = async () => {\n    // Assuming your CSV file is located in the `public` directory.\n    const response = await fetch('/simplemaps_worldcities_basicv1.77/worldcities.csv');\n    if (!response.ok) {\n      // If the response is not OK, log the error and return early\n      console.error(`HTTP error! status: ${response.status}`);\n      return;\n    }\n\n    // If the response is OK, read the text (CSV content)\n    const csv = await response.text();\n\n    // Now parse the CSV text\n    const results = Papa.parse(csv, {\n      header: true\n    });\n    const rows = results.data; // array of objects\n    setCities(rows);\n    if (rows.length > 0) {\n      console.log(\"First city from the loaded data:\", rows[0]);\n    } else {\n      console.log(\"No data in CSV\");\n    }\n  };\n  useEffect(() => {\n    loadCities();\n    fetchWeatherData(\"Ann Arbor\");\n  }, []);\n  const fetchRandomWeather = () => {\n    if (cities.length > 0) {\n      const tryFetch = () => {\n        const randomIndex = Math.floor(Math.random() * cities.length);\n        const randomCity = cities[randomIndex];\n        if (!randomCity || randomCity.city === \"\") {\n          // Invalid city object, retry\n          tryFetch();\n          return;\n        }\n        fetchWeatherData(randomCity.city, () => {\n          // onSuccess: Log the success or perform other actions\n          console.log(\"Weather data fetched successfully for: \" + randomCity.city);\n        }, () => {\n          // onError: Retry with another random city\n          console.log(\"Retrying with another city\");\n          tryFetch();\n        });\n      };\n      tryFetch();\n    }\n  };\n  let api_key = \"b619c02ef0d0c5ea4a66d9ddf680e09f\";\n  const element = document.getElementsByClassName(\"cityInput\");\n  const whereElseInTheWorld = async () => {\n    //We want to show the weather of a different city with the same temperature as the current city\n    const temperature = document.getElementsByClassName(\"weather-temp\")[0].innerHTML;\n    console.log(temperature);\n    const currentCity = document.getElementsByClassName(\"weather-location\")[0].innerHTML;\n    console.log(currentCity);\n    let randomCity = \"\";\n    let randomIndex = 0;\n    let found = false;\n    const startTime = Date.now(); // Get the current time at the start of the loop\n    while (!found) {\n      console.log(\"found before: \" + found);\n      randomIndex = Math.floor(Math.random() * cities.length);\n      randomCity = cities[randomIndex];\n      console.log(randomCity);\n      await fetchWeatherData(randomCity);\n      console.log(\"getElembyclass : \" + document.getElementsByClassName(\"weather-temp\")[0].innerHTML);\n      if (document.getElementsByClassName(\"weather-temp\")[0].innerHTML === temperature && randomCity !== currentCity) {\n        found = true;\n      }\n      console.log(document.getElementsByClassName(\"weather-temp\")[0].innerHTML);\n      console.log(found);\n      if (Date.now() - startTime > 10000) {\n        // If more than 10 seconds have passed\n        console.log(\"Time's up! Displaying the original city.\");\n        fetchWeatherData(currentCity); // Fetch the weather data for the original city\n        break; // Break the loop\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  };\n  const fetchWeatherData = async (city, onSuccess, onError) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_key}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"City not found\");\n      }\n      const data = await response.json();\n      setCurrentTemp(Math.floor((data.main.temp - 273.15) * 9 / 5 + 32));\n\n      // Update the UI with the new data\n      const humidity = document.getElementsByClassName(\"humidity-percentage\");\n      const wind = document.getElementsByClassName(\"wind-speed\");\n      const temperature = document.getElementsByClassName(\"weather-temp\");\n      const location = document.getElementsByClassName(\"weather-location\");\n      humidity[0].innerHTML = data.main.humidity + \"%\";\n      wind[0].innerHTML = data.wind.speed + \" mph\";\n      temperature[0].innerHTML = Math.floor((data.main.temp - 273.15) * 9 / 5 + 32) + \"Â°F\";\n      location[0].innerHTML = data.name;\n\n      // Update weather icon based on the API response\n      if (data.weather && data.weather[0].icon) {\n        switch (data.weather[0].icon) {\n          case \"01d\":\n            setWicon(clear_icon);\n            break;\n          case \"01n\":\n            setWicon(nightclear_icon);\n            break;\n          case \"02d\":\n          case \"03d\":\n          case \"04d\":\n            setWicon(cloud_icon);\n            break;\n          case \"02n\":\n          case \"03n\":\n          case \"04n\":\n            setWicon(nightcloud_icon);\n            break;\n          case \"09d\":\n            setWicon(drizzle_icon);\n            break;\n          case \"09n\":\n            setWicon(nightrain_icon);\n            break;\n          case \"10d\":\n            setWicon(rain_icon);\n            break;\n          case \"10n\":\n            setWicon(nightrain_icon);\n            break;\n          case \"11d\":\n            setWicon(thunderstorm_icon);\n            break;\n          case \"11n\":\n            setWicon(nightthunderstorm_icon);\n            break;\n          case \"13d\":\n            setWicon(snow_icon);\n            break;\n          case \"13n\":\n            setWicon(nightsnow_icon);\n            break;\n          default:\n            setWicon(cloud_icon);\n        }\n      }\n      if (onSuccess) {\n        onSuccess();\n      }\n    } catch (error) {\n      console.error(error);\n      setError(\"City not found\");\n      setTimeout(() => setError(\"\"), 3000);\n      if (onError) {\n        onError();\n      }\n    }\n  };\n  const search = () => {\n    if (element[0].value === \"\") {\n      return;\n    }\n    fetchWeatherData(element[0].value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"cityInput\",\n        placeholder: \"Search\",\n        onKeyPress: event => {\n          if (event.key === 'Enter') {\n            search();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-icon\",\n        onClick: search,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: search_icon,\n          alt: \"search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-info-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: wicon,\n          alt: \"cloud\",\n          className: \"main-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-details-button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-temp\",\n            children: \"57\\xB0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-location\",\n            children: \"Ann Arbor, United States\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"where-else\",\n          onClick: whereElseInTheWorld,\n          children: \"Twin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: humidity_icon,\n          alt: \"\",\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"humidity-percentage\",\n            children: \"64%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: \"Humidity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: wind_icon,\n          alt: \"\",\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wind-speed\",\n            children: \"10 mph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: \"Wind Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"lucky-button\",\n      onClick: fetchRandomWeather,\n      children: \"I'm Feeling Lucky\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherApp, \"A/6SfGE4eDNjo6M8v0Rv0uVlRFw=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["useState","useEffect","Papa","search_icon","cloud_icon","rain_icon","snow_icon","humidity_icon","drizzle_icon","clear_icon","wind_icon","thunderstorm_icon","nightrain_icon","nightclear_icon","nightcloud_icon","nightthunderstorm_icon","nightsnow_icon","jsxDEV","_jsxDEV","WeatherApp","_s","wicon","setWicon","cities","setCities","error","setError","currentTemp","setCurrentTemp","loadCities","response","fetch","ok","console","status","csv","text","results","parse","header","rows","data","length","log","fetchWeatherData","fetchRandomWeather","tryFetch","randomIndex","Math","floor","random","randomCity","city","api_key","element","document","getElementsByClassName","whereElseInTheWorld","temperature","innerHTML","currentCity","found","startTime","Date","now","onSuccess","onError","url","Error","json","main","temp","humidity","wind","location","speed","name","weather","icon","setTimeout","search","value","className","children","type","placeholder","onKeyPress","event","key","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/rakikrishnan/Desktop/weather-app/src/Components/WeatherApp/WeatherApp.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './WeatherApp.css';\nimport Papa from 'papaparse';\nimport search_icon from \"../Assets/search.png\";\nimport cloud_icon from \"../Assets/cloud.png\";\nimport rain_icon from \"../Assets/rain.png\";\nimport snow_icon from \"../Assets/snow.png\";\nimport humidity_icon from \"../Assets/humidity.png\";\nimport drizzle_icon from \"../Assets/drizzle.png\";\nimport clear_icon from \"../Assets/clear.png\";\nimport wind_icon from \"../Assets/wind.png\";\nimport thunderstorm_icon from \"../Assets/thunderstorm.png\";\nimport nightrain_icon from \"../Assets/nightrain.png\";\nimport nightclear_icon from \"../Assets/nightclear.png\";\nimport nightcloud_icon from \"../Assets/nightcloud.png\";\nimport nightthunderstorm_icon from \"../Assets/nightthunderstorm.png\";\nimport nightsnow_icon from \"../Assets/nightsnow.png\";\n\n\nconst WeatherApp = () => {\n\n    const [wicon, setWicon] = useState(cloud_icon);\n    const [cities, setCities] = useState([]);\n    const [error, setError] = useState(\"\");\n    const [currentTemp, setCurrentTemp] = useState(null);\n    \n    \n    // const cities = [\"Tokyo\", \"New York\", \"London\", \"Paris\", \"Sydney\", \n    // \"Moscow\", \"Cairo\", \"Rio de Janeiro\", \"Toronto\", \"Beijing\", \"Berlin\", \"Rome\", \"Madrid\",\n    // \"Dubai\", \"Seoul\", \"Istanbul\", \"Mumbai\", \"Bangkok\", \"Los Angeles\", \"Chicago\", \"Miami\",\n    // \"Las Vegas\", \"San Francisco\", \"Washington\", \"Boston\", \"Seattle\", \"Dallas\", \"Houston\",\n    // \"Atlanta\", \"Philadelphia\", \"Phoenix\", \"Denver\", \"Minneapolis\", \"Detroit\", \"Honolulu\",\n    // \"Anchorage\", \"Mexico City\", \"Buenos Aires\", \"Sao Paulo\", \"Cape Town\", \"Johannesburg\",\n    // \"Nairobi\", \"Copenhagen\", \"Stockholm\", \"Oslo\", \"Helsinki\", \"Warsaw\", \"Prague\", \"Vienna\",\n    // \"Budapest\", \"Athens\", \"Melbourne\", \"Edinburgh\", \"St. Petersburg\", \"Kiev\", \"Minsk\", \"Pretoria\",\n    // \"New Delhi\", \"Chennai\", \"Bombay\", \"Cologne\", \"Frankfurt\", \"Zurich\", \"Geneva\", \" Bogota\",\n    // \"Lima\", \"Caracas\", \"Santiago\", \"Cancun\", \"Quito\", \"Guayaquil\", \"La Paz\", \"Asuncion\",\n    // \"San Diego\", \"San Antonio\", \"San Jose\", \"New Orleans\", \"Portland\", \"Salt Lake City\",\n    // \"Barcelona\", \"Venice\", \"Milan\", \"Amsterdam\", \"Brussels\", \"Dublin\", \"Lisbon\", \"Bucharest\",\n    // \"Shanghai\", \"Hong Kong\", \"Singapore\", \"Kuala Lumpur\", \"Jakarta\", \"Manila\", \"Hanoi\", \n    // \"Normandy\", \"Taipei\", \"Auckland\", \"Wellington\", \"Christchurch\", \"Brisbane\", \"Perth\"];\n\n\n    const loadCities = async () => {\n        // Assuming your CSV file is located in the `public` directory.\n        const response = await fetch('/simplemaps_worldcities_basicv1.77/worldcities.csv');\n\n        if (!response.ok) {\n            // If the response is not OK, log the error and return early\n            console.error(`HTTP error! status: ${response.status}`);\n            return;\n        }\n\n        // If the response is OK, read the text (CSV content)\n        const csv = await response.text();\n\n        // Now parse the CSV text\n        const results = Papa.parse(csv, { header: true });\n        const rows = results.data; // array of objects\n        setCities(rows);\n        \n        if (rows.length > 0) {\n            console.log(\"First city from the loaded data:\", rows[0]);\n        } else {\n            console.log(\"No data in CSV\");\n        }\n    };\n    \n    useEffect(() => {\n        loadCities();\n        fetchWeatherData(\"Ann Arbor\");\n    }, []);\n\n    const fetchRandomWeather = () => {\n        if (cities.length > 0) {\n            const tryFetch = () => {\n                const randomIndex = Math.floor(Math.random() * cities.length);\n                const randomCity = cities[randomIndex];\n    \n                if (!randomCity || randomCity.city === \"\") {\n                    // Invalid city object, retry\n                    tryFetch();\n                    return;\n                }\n    \n                fetchWeatherData(randomCity.city, () => {\n                    // onSuccess: Log the success or perform other actions\n                    console.log(\"Weather data fetched successfully for: \" + randomCity.city);\n                }, () => {\n                    // onError: Retry with another random city\n                    console.log(\"Retrying with another city\");\n                    tryFetch();\n                });\n            };\n    \n            tryFetch();\n        }\n    };\n\n\n\n    let api_key = \"b619c02ef0d0c5ea4a66d9ddf680e09f\";\n    const element = document.getElementsByClassName(\"cityInput\");\n\n    const whereElseInTheWorld = async () => {\n        //We want to show the weather of a different city with the same temperature as the current city\n        const temperature = document.getElementsByClassName(\"weather-temp\")[0].innerHTML;\n        console.log(temperature);\n        const currentCity = document.getElementsByClassName(\"weather-location\")[0].innerHTML;\n        console.log(currentCity);\n        let randomCity = \"\";\n        let randomIndex = 0;\n        let found = false;\n        const startTime = Date.now(); // Get the current time at the start of the loop\n        while (!found) {\n            console.log(\"found before: \" + found)\n            randomIndex = Math.floor(Math.random() * cities.length);\n            randomCity = cities[randomIndex];\n            console.log(randomCity);\n            await fetchWeatherData(randomCity);\n            console.log(\"getElembyclass : \" + document.getElementsByClassName(\"weather-temp\")[0].innerHTML)\n            if (document.getElementsByClassName(\"weather-temp\")[0].innerHTML === temperature && randomCity !== currentCity) {\n                found = true;\n            }\n            console.log(document.getElementsByClassName(\"weather-temp\")[0].innerHTML);\n            console.log(found);\n            if (Date.now() - startTime > 10000) { // If more than 10 seconds have passed\n                console.log(\"Time's up! Displaying the original city.\");\n                fetchWeatherData(currentCity); // Fetch the weather data for the original city\n                break; // Break the loop\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    };\n\n    const fetchWeatherData = async (city, onSuccess, onError) => {\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_key}`;\n    \n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(\"City not found\");\n            }\n    \n            const data = await response.json();\n            setCurrentTemp(Math.floor((data.main.temp - 273.15) * 9/5 + 32));\n    \n            // Update the UI with the new data\n            const humidity = document.getElementsByClassName(\"humidity-percentage\");\n            const wind = document.getElementsByClassName(\"wind-speed\");\n            const temperature = document.getElementsByClassName(\"weather-temp\");\n            const location = document.getElementsByClassName(\"weather-location\");\n    \n            humidity[0].innerHTML = data.main.humidity + \"%\";\n            wind[0].innerHTML = data.wind.speed + \" mph\";\n            temperature[0].innerHTML = Math.floor((data.main.temp - 273.15) * 9/5 + 32) + \"Â°F\";\n            location[0].innerHTML = data.name;\n    \n            // Update weather icon based on the API response\n            if(data.weather && data.weather[0].icon) {\n                switch(data.weather[0].icon) {\n                    case \"01d\":\n                        setWicon(clear_icon);\n                        break;\n                    case \"01n\":\n                        setWicon(nightclear_icon);\n                        break;\n                    case \"02d\":\n                    case \"03d\":\n                    case \"04d\":\n                        setWicon(cloud_icon);\n                        break;\n                    case \"02n\":\n                    case \"03n\":\n                    case \"04n\":\n                        setWicon(nightcloud_icon);\n                        break;\n                    case \"09d\":\n                        setWicon(drizzle_icon);\n                        break;\n                    case \"09n\":\n                        setWicon(nightrain_icon);\n                        break;\n                    case \"10d\":\n                        setWicon(rain_icon);\n                        break;\n                    case \"10n\":\n                        setWicon(nightrain_icon);\n                        break;\n                    case \"11d\":\n                        setWicon(thunderstorm_icon);\n                        break;\n                    case \"11n\":\n                        setWicon(nightthunderstorm_icon);\n                        break;\n                    case \"13d\":\n                        setWicon(snow_icon);\n                        break;\n                    case \"13n\":\n                        setWicon(nightsnow_icon);\n                        break;\n                    default:\n                        setWicon(cloud_icon);\n                }\n            }\n            if (onSuccess) {\n                onSuccess();\n            }\n        } catch (error) {\n            console.error(error);\n            setError(\"City not found\");\n            setTimeout(() => setError(\"\"), 3000);\n            if (onError) {\n                onError();\n            }\n        }\n    };\n\n    const search = () => {\n        if (element[0].value === \"\") {\n            return;\n        }\n        fetchWeatherData(element[0].value);\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"top-bar\">\n                <input \n                    type=\"text\" \n                    className=\"cityInput\" \n                    placeholder=\"Search\"\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            search();\n                        }\n                    }}\n                />\n                <div className=\"search-icon\" onClick={search}>\n                    <img src={search_icon} alt=\"search\"/>\n                </div>\n            </div>\n            {error && <div className=\"error\">{error}</div>}\n            <div className=\"weather-info-container\">\n                <div className=\"weather-image\">\n                    <img src={wicon} alt=\"cloud\" className=\"main-icon\" />\n                </div>\n                \n                <div className=\"weather-details-button-container\">\n                    <div className=\"weather-details\">\n                        <div className=\"weather-temp\">57Â°F</div>\n                        <div className=\"weather-location\">Ann Arbor, United States</div>\n                    </div>\n                    <button className=\"where-else\" onClick={whereElseInTheWorld}>Twin</button>\n                </div>\n            </div>\n            <div className=\"data-container\">\n                <div className=\"element\">\n                    <img src={humidity_icon} alt=\"\" className=\"icon\" />\n                    <div className=\"data\">\n                        <div className=\"humidity-percentage\">64%</div>\n                        <div className=\"text\">Humidity</div>\n                    </div>\n                </div>\n                <div className=\"element\">\n                    <img src={wind_icon} alt=\"\" className=\"icon\" />\n                    <div className=\"data\">\n                        <div className=\"wind-speed\">10 mph</div>\n                        <div className=\"text\">Wind Speed</div>\n                    </div>\n                </div>\n            </div>\n            <button className=\"lucky-button\" onClick={fetchRandomWeather}>I'm Feeling Lucky</button>\n        </div>\n    )\n}\n\nexport default WeatherApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}